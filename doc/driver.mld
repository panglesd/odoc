{0 How to Drive [odoc]}

[odoc] is a CLI tool to create API and documentation for OCaml
projects. However, it operates at a rather low level, taking individual files
through several distinct phases until the HTML output is generated.

For this reason, just like for building any multifiles OCaml project, [odoc]
needs to be driver by a higher level tool. The driver will take care of calling
the [odoc] command with the right arguments throughout the different
phases. Several drivers for [odoc] exist, such as:
{{:https://dune.readthedocs.io/en/stable/documentation.html}dune} and
{{:https://erratique.ch/software/odig}odig}.

The [odoc] tools also contains a "reference driver", that is kept up-to-date
with the latest development of [odoc].

This document explains how to drive [odoc], as of version 3. It is not needed to
know any of this to {e use} [odoc], it is targeted at driver authors, tools that
interact with [odoc], or any curious passerby. This includes several subjects:

- A big picture view of the doc generation model,
- A unified explanation for the various command line flags,
- An explanation of the [odoc] pipeline,
- A convention for building docs for [opam]-installed packages.

In addition to the documentation, the reference driver is a good tool to
understand how to build [odoc] projects. It can be useful to look at the
implementation code, but it can also help to simply look at all invocation of
[odoc] during a run of the driver.

{1:units Units of documentation}

In its third major version, [odoc] has been improved so that a single
documentation can work on multiple scenarios, from local switches to big
monorepos, or the ocaml.org hub of documentation for all packages.

The idea is that we have named units of documentation. We have two kind of them:
page units, and modules units. Inside the units, everything is managed by
[odoc]. Outside of the unit, the driver is free to arranged them however they
like. (Note that however, for building [opam] packages there is a convention to
follow for the driver.) In order to reference another unit, a documentation
author can use the name of the unit.

Different situations will give different meanings to the units. In the case of
[opam] packages, though, there is a natural meaning to give to those units
(you'll find more details in the convention for opam-installed packages). Any
opam package will have an associated "documentation unit", with the name of the
package. Any of its libraries will have an associated "module unit", with the
name of the library. Another package can refer to the doc using the package
name, or to any of its library using the library name, no matter where the
package is located in the hierarchy.

{1 The doc generation pipeline}

Just like when compiling OCaml modules, generating docs for these modules need
to be run in a specific order, as some information for generating docs for a
file might reside in another one. However, [odoc] actually allows a particular
file to reference a module that depend on it, creating a circular dependency.

This circular dependency problem is one of the reason we have several phases in
[odoc]. Let's review them:

- The [compile] phase, which is used to create the [.odoc] artifacts from
  [.cm{i;t;ti}] and [.mld] files. This is where [odoc] does a similar work to
  that of OCaml, computing expansions for each module types. The dependencies
  between are the same as the ones for the [.cm{i;t;ti}] input.

- The [link] phase transforms the [.odoc] artifacts to [.odocl]. The main result
  of this phase is to resolve odoc reference, which also has an effect on
  canonical modules.

- The [indexing] phase generates [.odoc-index] files from sets of [.odocl]
  files. These index files will be used both for generating a global sidebar,
  and for generating a search index.

- The [generation] phase takes the [.odocl] and [.odoc-index] files and turns
  them into either HTML, man pages or Latex files.

{2 The compile phase}

The compile phase takes as input a set of [.cm{i;t;ti}] as well as [.mld] files,
and builds a directory hierarchy of [.odoc] files.

There are two distinct commands for this phase: [odoc compile] for interfaces and pages, and [odoc compile-impl] for implementations.

Let's have a look at a generic invocation of [odoc] during the compile phase:

{@shell[
  $ odoc compile --output-dir <od> --parent-id <pi> -I <dir1> -I <dir2> <input-file>.<ext>
]}

- [<input-file>.<ext>] is the input file, either a [.cm{i;t;ti}] file or an [.mld]
  file. Prefer [.cmti] files over the other format!

- [--output-dir <od>] allows to specify the directory that will contain all the
  [.odoc] files. This directory has to be fully managed by [odoc] and should not
  be modified by another tool!

- [--parent-id <pi>] allows to place the output [.odoc] file in the
  documentation hierarchy. This consists in a [/] separated sequence of non
  empty strings (used as directory name). This "path" determines where the
  [.odoc] file will be located below the [<od>] output dir. The name of the
  output file is [<input-file>.odoc] for modules, and [page-<input-file>.odoc]
  for pages. Documentation artifacts that will be in the same {{!units}unit of
  documentation} needs to hare a common root in their parent id.

- [-I <dir>] corresponds to the search path for other [.odoc] file. It can be
  given as many times as necessary, but should allow to access every [.odoc]
  file generated from a [.cm{i;t;ti}] listed when calling [odoc compile-deps] on
  the input file. [<dir>] are directories under the [<od>] directory, computed
  from the [--parent-id] option given to previous call to [odoc compile].

A concrete example for such command would be:

{@shell[
  $ odoc compile ~/.opam/5.2.0/lib/ppxlib/ppxlib__Extension.cmti --output-dir _odoc/ -I _odoc/ocaml-base-compiler/lib/compiler-libs.common -I _odoc/ocaml-base-compiler/lib/stdlib -I _odoc/ocaml-compiler-libs/lib/ocaml-compiler-libs.common -I _odoc/ppxlib/lib/ppxlib -I _odoc/ppxlib/lib/ppxlib.ast -I _odoc/ppxlib/lib/ppxlib.astlib -I _odoc/ppxlib/lib/ppxlib.stdppx -I _odoc/ppxlib/lib/ppxlib.traverse_builtins -I _odoc/sexplib0/lib/sexplib0 --parent-id ppxlib/lib/ppxlib
]}

A [compile-impl] command is pretty similar:

{@shell[
  $ odoc compile-impl --output-dir <od> --source-id --parent-id <pi> -I <dir1> -I <dir2> <input-file>.<ext>
]}

- [<input-file>.<ext>] is the input file, either a [.cm{i;t;ti}] file or an [.mld]
  file. Prefer [.cmti] files over the other format!

- [--output-dir <od>] allows to specify the directory that will contain all the
  [.odoc] files. This directory has to be fully managed by [odoc] and should not
  be modified by another tool!

- [--parent-id <pi>] allows to place the output [.odoc] file in the
  documentation hierarchy. This consists in a [/] separated sequence of non
  empty strings (used as directory name). This "path" determines where the
  [.odoc] file will be located below the [<od>] output dir. The name of the
  output file is [<input-file>.odoc] for modules, and [page-<input-file>.odoc]
  for pages. Documentation artifacts that will be in the same {{!units}unit of
  documentation} needs to hare a common root in their parent id.

- [-I <dir>] corresponds to the search path for other [.odoc] file. It can be
  given as many times as necessary, but should allow to access every [.odoc]
  file generated from a [.cm{i;t;ti}] listed when calling [odoc compile-deps] on
  the input file. [<dir>] are directories under the [<od>] directory, computed
  from the [--parent-id] option given to previous call to [odoc compile].

{2 The link phase}

The link phase requires the directory of the [compile] phase to generate its set
of [.odocl] files. This phase resolves references and canonicals.

A generic link command is:

{@shell[
  $ odoc link
      -I <dir1> -I <dir2>
      -P <pname1>:<pdir1> -P <pname2>:<pdir2>
      -L <lname1>:<ldir1> -L <lname2>:<ldir2>
      <path/to/file.odoc>
]}

- [<path/to/file.odoc] is the input [.odoc] file. The result of this command is
  [path/to/file.odocl]. This path was determined by [--output-dir] and
  [--parent-id] from the link phase, and it is important for the indexing phase
  that it stays in the same location.

- [-P <name>:<dir>] 