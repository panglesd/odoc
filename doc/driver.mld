{0 How to Drive [odoc]}

[odoc] is a CLI tool to create API and documentation for OCaml
projects. However, it operates at a rather low level, taking individual files
through several distinct phases until the HTML output is generated.

For this reason, just like for building any multifiles OCaml project, [odoc]
needs to be driver by a higher level tool. The driver will take care of calling
the [odoc] command with the right arguments throughout the different
phases. Several drivers for [odoc] exist, such as:
{{:https://dune.readthedocs.io/en/stable/documentation.html}dune} and
{{:https://erratique.ch/software/odig}odig}.

The [odoc] tools also contains a "reference driver", that is kept up-to-date
with the latest development of [odoc].

This document explains how to drive [odoc], as of version 3. It is not needed to
know any of this to {e use} [odoc], it is targeted at driver authors, tools that
interact with [odoc], or any curious passerby. This includes several subjects:

- A big picture view of the doc generation model,
- A unified explanation for the various command line flags,
- An explanation of the [odoc] pipeline,
- A convention for building docs for [opam]-installed packages.

{1 The model for Odoc 3}

In its third major version, [odoc] has been improved so that a single
documentation can work on multiple scenarios, from local switches to big
monorepos, or the ocaml.org hub of documentation for all packages.

The idea is that we have named units of documentation. We have two kind of them:
page units, and libraries units. Inside the units, everything is managed by
[odoc]. Outside of the unit, the driver is free to arranged them however they
like. Note that for building [opam] packages, there is a convention to follow
for the driver. In order to reference another unit, a documentation author can
use the name of the unit.

Let's take an example (you'll find more details on this in the convention for
opam-installed packages). Any opam package will have an associated documentation
unit, with the name of the package. Any of its libraries will have an associated
library unit. Another package can refer to the doc using the package name, or to
any of its library using the library name, no matter where the package is
located in the hierarchy.

The goal of these units of compilation

Each of these units of documentation can refer to each others.

{1 The doc generation pipeline}

